---
title: "data_clean"
format: html
editor: visual
---

# Final Project: Alternate Runs Data-set

**Experimental design:** Â Switching every 4 trials in an alternating runs manner (no cues). Total of 8 experimental blocks were intended, but 60 subjects saw only 7 blocks. Across these blocks counterbalancing of four conditions: Both tasks unambiguous (1), both tasks ambiguous (4), shape ambiguous when irrelevant, color always ambiguous (2), shape always ambiguous, color unambiguous when irrelevant (2)

### **What the variables mean:**

-   block: 0 for practice, there are a total of 8 blocks per part and each block consists of 112 trials. So 896 trials per participant over all 7 blocks (not counting practice)

-   bal: counterbalancing of conditions across blocks

-   x, y, c2: irrelevant (already taken out)

-   cycle: counting within full alternating cycle (8), switch at 1 and 5

-   task: 1=shape, 2=color

-   dimshape=specific shapes--4=neutral

-   dimcolor=specific color--4=neutral

-   correct: correct response (i.e., value of the currently relevant task dimension)

-   error: 0 = no error, 1 = yes error

-   response: actual response

-   RT: or response time

### Import data-set and some packages

```{r}
#open neccesary packages here
library(tidyverse)
library(janitor)
library(readr)
library(rio)
library(psych) #generate metrix w scatterplot and cor
#import dataset
AlternateRuns <- read_csv("AlternateRuns.csv")
view(AlternateRuns)
```

## Clean-Data

### Rename Columns to Understand Better

```{r}
#rename columns to understand better
alt_run <- AlternateRuns %>% 
  rename(dimshape = dim1, dimcolor = dim2, RT = time, correct = cor, response = res)
alt_run

```

### Replace Numeric Values w Character Strings for Task and Error
This is set to a new df in case we want to use the variables for task or error in a graph as a character. 

```{r}
# replace numeric values w character strings for task and error
alt_run_1 <- alt_run %>% mutate(task = recode(task, `1` = "shape", `2` = 'color')) %>% 
  mutate(error = recode(error, `0` = "no", `1` = 'yes'))
alt_run_1
```

### Remove Practice Trials in Block Variable + pivot func

```{r}
#removing practice trials from our df
alt_run <- alt_run %>% 
  filter(block != 0) %>% 
  print()

#use pivot long and/or? wide here with some key variables we want to look at. may need to alter df to turn some 1s and 0s in columns to be names... (correct, incorrect or color, shape). fix code below...

# alt_run %>% 
#   pivot_wider(names_from = task, values_from = block)
```

### Determine and Remove Outliers (Error way...)

```{r}
# we are testing for accuracy, so we need at least 80% accuracy in all trials per participant 
#determine 80% accuracy 
crit <- 896 - (896 * .8)
crit # need at least 179 out of 896 trials to be correct, denoted by 0 in error col
sum_er <- alt_run %>% 
  group_by(id) %>% 
summarize(sum = sum(error)) %>% 
  print()

sum_er <- sum_er %>% 
  mutate(outlier_er =  (sum > crit)) %>% 
  print()
  
sum_er <- sum_er %>% 
  filter(outlier_er == !FALSE) %>% 
  print() #two people fall below 80% accuracy

#removing those outliers here 

alt_run <- alt_run %>% 
  filter(id != 70, id != 87)

```

### Determine and Remove inter-response Outliers 

```{r}
#lets look at the top RTs. 
alt_run %>% 
  arrange(desc(RT))

#WHAT TO DO: zscore on each seq postiion x switch x abiguity on RT then zscore on each block (to account for some participants only doing 7 instaead of 8 blocks) 

#STEP 1: cycles of 4 mutate to make a new group for easier cycle analysis
alt_run <- alt_run %>% 
  mutate(switchcyc = if_else(cycle == 5, 1, cycle, NA_real_) , controlcyc = if_else(cycle != 1,5, cycle, NA_real_))
alt_run

#(switchcyc = if_else(cycle == 1, cycle, NA_real_), controlcyc = if_else(cycle != 5, cycle, NA_real_))


#mean_rt_per <- alt_run %>% 
 # group_by(id) %>% 
 # summarize(mean(RT, na.rm = TRUE)) %>% 
 # print()

#sd_rt_per <- alt_run %>% 
 # group_by(id) %>% 
 # summarize(sd(RT, na.rm = TRUE)) %>% 
#  print()

#z_scores <- (alt_run$RT - mean_rt_per)/sd_rt_per

#alt_run_r <- alt_run %>%
 # group_by(id) %>% 
  #mutate(z_scores = z_scores) %>% 
  #select(z_scores, RT, id) %>% 
 # print()


#alt_run %>% 
 # group_by(z_scores, id) %>% 
 # print()

#outliers_alt <- alt_run$RT[abs(z_scores) > 3]
  #tibble(outliers_alt)
```

## Descriptive Graphs

### 1. Histogram of RT

```{r}
mean_rt <- mean(alt_run$RT, na.rm = TRUE)
mean_rt
sd_rt <-  sd(alt_run$RT, na.rm = TRUE)


alt_run %>% 
  ggplot(aes(x=RT)) +
  geom_histogram(aes(y = after_stat(density)), fill = 'darkgreen', color = 'darkblue') +
  geom_vline(aes(xintercept = mean_rt) , color = 'red', linetype = 'dashed', size = 1.5) +
    theme_minimal() +
  stat_function(fun = dnorm, args = list(mean = mean_rt, sd = sd_rt) ,  col = 'gold', size = 1.5) +
    labs(x= 'Response Times (ms)', y= 'Density', title = 'Density plot of Response Times', subtitle = 'The mean and normal density curve of RTs') 

plotly::ggplotly()
```

### 2. Boxplot of RT

```{r}
#boxplot of all RTs regardless of task
boxplot(alt_run_1$RT)

#boxplot of RTs when doing shape task
boxplot_s <- filter(alt_run_1, task == 'shape')
boxplot(boxplot_s$RT)

#boxplot of RTs when doing color task
boxplot_c <- filter(alt_run_1, task == 'color')
boxplot(boxplot_c$RT)
```

### 3. Correlations

```{r}
cor_alt <- alt_run %>% 
  select(RT, cycle, task)
  cor(cor_alt, use = "complete.obs")
```

```{r}
#is there a correlation between response times and error rate? also note: used the psych package to generate this
  alt_run %>% 
    select(RT, error) %>%
    pairs.panels(lm = TRUE)
```

**5. Scatterplots in select**

-   What is the relationship between error and response time?

-   What is the position of the cycle and the relationship from that to the response time?

-   What are the dynamics of switching tasks? (5^th^ cycle or 1^st^)

-   Is there a difference in response time when people swtich from task to another?

```{r}
#inspect alt_run dataset
head(alt_run)
```

```{r}
#relationship between error and response time
#There are only two conditions of error: 0= No error, 1= Yes error
#Makes scatterplots relations with RT on 2 linear lines. 
alt_run %>%
  ggplot(aes(RT,error))+
  geom_point()
  
```

```{r}
#position of cylce and relationship with response time
#relationship between Response Time and Cycle also produces some scatterplots
#output is liner and not sure of what it says about the data
alt_run %>% 
  ggplot(aes(RT,cycle))+
  geom_point()
```

```{r}
#position of cycle in relation to response time?
alt_run %>% 
  ggplot(aes(cycle,RT)) +
  geom_point()
```

#### narrow df for plotting

```{r}
alt_select <- alt_run %>% 
  select(task, trial,cycle,response,error,RT)
head(alt_select)
```

```{r}
# task and response time
alt_select %>% 
  ggplot(aes(RT,task))+
  geom_point()
```

**6. Selecting : already did?**

**7. Pivoting**

**8. Descriptives table**
